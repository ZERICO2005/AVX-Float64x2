
// SIMD constants for types that aren't implemented yet.

//------------------------------------------------------------------------------
// __m128dx2 Float64x2 SSE2
//------------------------------------------------------------------------------

/**
* @brief ~2.718281828 Returns the value of euler's number
*/
__m128dx2 _mm128x2_const_e_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x4005BF0A8B145769)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3CA4D57EE2B1013A))
	};
	return ret;
}

/**
* @brief ~1.442695041 Returns the value of log2(e)
*/
__m128dx2 _mm128x2_const_log2e_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FF71547652B82FE)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3C7777D0FFDA0D24))
	};
	return ret;
}

/**
* @brief ~0.434294482 Returns the value of log10(e)
*/
__m128dx2 _mm128x2_const_log10e_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FDBCB7B1526E50E)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3C695355BAAAFAD3))
	};
	return ret;
}

/**
* @brief ~3.141592654 Returns the value of pi
*/
__m128dx2 _mm128x2_const_pi_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x400921FB54442D18)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3CA1A62633145C07))
	};
	return ret;
}

/**
* @brief ~0.318309886 Returns the value of 1 / pi
*/
__m128dx2 _mm128x2_const_inv_pi_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FD45F306DC9C883)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0xBC76B01EC5417056))
	};
	return ret;
}

/**
* @brief ~0.564189584 Returns the value of 1 / sqrt(pi)
*/
__m128dx2 _mm128x2_const_inv_sqrtpi_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FE20DD750429B6D)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3C61AE3A914FED80))
	};
	return ret;
}

/**
* @brief ~0.693147181 Returns the value of ln(2)
*/
__m128dx2 _mm128x2_const_ln2_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FE62E42FEFA39EF)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3C7ABC9E3B39803F))
	};
	return ret;
}

/**
* @brief ~2.302585093 Returns the value of ln(10)
*/
__m128dx2 _mm128x2_const_ln10_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x40026BB1BBB55516)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0xBCAF48AD494EA3E9))
	};
	return ret;
}

/**
* @brief ~1.414213562 Returns the value of sqrt(2)
*/
__m128dx2 _mm128x2_const_sqrt2_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FF6A09E667F3BCD)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0xBC9BDD3413B26456))
	};
	return ret;
}

/**
* @brief ~1.732050808 Returns the value of sqrt(3)
*/
__m128dx2 _mm128x2_const_sqrt3_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FFBB67AE8584CAA)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3C9CEC95D0B5C1E3))
	};
	return ret;
}

/**
* @brief ~0.577350269 Returns the value of 1 / sqrt(3)
*/
__m128dx2 _mm128x2_const_inv_sqrt3_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FE279A74590331C)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3C834863E0792BED))
	};
	return ret;
}

/**
* @brief ~0.577215665 Returns the value of gamma (The Euler–Mascheroni constant)
*/
__m128dx2 _mm128x2_const_egamma_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FE2788CFC6FB619)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0xBC56CB90701FBFAB))
	};
	return ret;
}

/**
* @brief ~1.618033989 Returns the value of phi (The golden ratio)
*/
__m128dx2 _mm128x2_const_phi_pdx2(void) {
	const __m128dx2 ret = {
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0x3FF9E3779B97F4A8)),
		_mm_castsi128_pd(_mm_set1_epi64x((int64_t)0xBC8F506319FCFD19))
	};
	return ret;
}

//------------------------------------------------------------------------------
// __m512dx2 Float64x2 AVX512F
//------------------------------------------------------------------------------

/**
* @brief ~2.718281828 Returns the value of euler's number
*/
__m512dx2 _mm512x2_const_e_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x4005BF0A8B145769)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3CA4D57EE2B1013A))
	};
	return ret;
}

/**
* @brief ~1.442695041 Returns the value of log2(e)
*/
__m512dx2 _mm512x2_const_log2e_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FF71547652B82FE)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3C7777D0FFDA0D24))
	};
	return ret;
}

/**
* @brief ~0.434294482 Returns the value of log10(e)
*/
__m512dx2 _mm512x2_const_log10e_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FDBCB7B1526E50E)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3C695355BAAAFAD3))
	};
	return ret;
}

/**
* @brief ~3.141592654 Returns the value of pi
*/
__m512dx2 _mm512x2_const_pi_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x400921FB54442D18)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3CA1A62633145C07))
	};
	return ret;
}

/**
* @brief ~0.318309886 Returns the value of 1 / pi
*/
__m512dx2 _mm512x2_const_inv_pi_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FD45F306DC9C883)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0xBC76B01EC5417056))
	};
	return ret;
}

/**
* @brief ~0.564189584 Returns the value of 1 / sqrt(pi)
*/
__m512dx2 _mm512x2_const_inv_sqrtpi_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FE20DD750429B6D)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3C61AE3A914FED80))
	};
	return ret;
}

/**
* @brief ~0.693147181 Returns the value of ln(2)
*/
__m512dx2 _mm512x2_const_ln2_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FE62E42FEFA39EF)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3C7ABC9E3B39803F))
	};
	return ret;
}

/**
* @brief ~2.302585093 Returns the value of ln(10)
*/
__m512dx2 _mm512x2_const_ln10_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x40026BB1BBB55516)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0xBCAF48AD494EA3E9))
	};
	return ret;
}

/**
* @brief ~1.414213562 Returns the value of sqrt(2)
*/
__m512dx2 _mm512x2_const_sqrt2_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FF6A09E667F3BCD)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0xBC9BDD3413B26456))
	};
	return ret;
}

/**
* @brief ~1.732050808 Returns the value of sqrt(3)
*/
__m512dx2 _mm512x2_const_sqrt3_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FFBB67AE8584CAA)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3C9CEC95D0B5C1E3))
	};
	return ret;
}

/**
* @brief ~0.577350269 Returns the value of 1 / sqrt(3)
*/
__m512dx2 _mm512x2_const_inv_sqrt3_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FE279A74590331C)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3C834863E0792BED))
	};
	return ret;
}

/**
* @brief ~0.577215665 Returns the value of gamma (The Euler–Mascheroni constant)
*/
__m512dx2 _mm512x2_const_egamma_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FE2788CFC6FB619)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0xBC56CB90701FBFAB))
	};
	return ret;
}

/**
* @brief ~1.618033989 Returns the value of phi (The golden ratio)
*/
__m512dx2 _mm512x2_const_phi_pdx2(void) {
	const __m512dx2 ret = {
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0x3FF9E3779B97F4A8)),
		_mm512_castsi512_pd(_mm512_set1_epi64((int64_t)0xBC8F506319FCFD19))
	};
	return ret;
}
